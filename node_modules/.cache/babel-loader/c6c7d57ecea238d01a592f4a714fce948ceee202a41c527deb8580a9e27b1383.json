{"ast":null,"code":"/*!\n * Chart.js v4.5.1\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _normalizeAngle, am as _readValueToProps, an as _updateBezierControlPoints, ao as _computeSegments, ap as _boundSegments, aq as _steppedInterpolation, ar as _bezierInterpolation, as as _pointInLine, at as _steppedLineTo, au as _bezierCurveTo, av as drawPoint, aw as addRoundedRectPath, ax as toTRBL, ay as toTRBLCorners, az as _boundSegment, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  if (!found && !options.all) {\n    return 0;\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getAxisCount() {\n    return this._getAxis().length;\n  }\n  getFirstScaleIdForIndexAxis() {\n    const scales = this.chart.scales;\n    const indexScaleId = this.chart.options.indexAxis;\n    return Object.keys(scales).filter(key => scales[key].axis === indexScaleId).shift();\n  }\n  _getAxis() {\n    const axis = {};\n    const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n    for (const dataset of this.chart.data.datasets) {\n      axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n    }\n    return Object.keys(axis);\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    const axisCount = this._getAxisCount();\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n      const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n      const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            const {\n              labels: {\n                pointStyle,\n                textAlign,\n                color,\n                useBorderRadius,\n                borderRadius\n              }\n            } = chart.legend.options;\n            if (data.labels.length && data.datasets.length) {\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  fontColor: color,\n                  hidden: !chart.getDataVisibility(i),\n                  lineDash: style.borderDash,\n                  lineDashOffset: style.borderDashOffset,\n                  lineJoin: style.borderJoinStyle,\n                  lineWidth: style.borderWidth,\n                  strokeStyle: style.borderColor,\n                  textAlign: textAlign,\n                  pointStyle: pointStyle,\n                  borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  options;\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {\n          vScale\n        } = controller._cachedMeta;\n        const {\n          _parsed\n        } = metaset;\n        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = undefined;\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    if (this._init === undefined) {\n      return;\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n      this._init = undefined;\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.5.1\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    const clip = getDatasetClipArea(this, meta);\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n    meta.controller.draw();\n    if (clip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipSelf(ctx, element, endAngle) {\n  const {\n    startAngle,\n    x,\n    y,\n    outerRadius,\n    innerRadius,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n  if (innerRadius > 0) {\n    const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n  } else {\n    const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n    if (borderJoinStyle === 'round') {\n      ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n    } else if (borderJoinStyle === 'bevel') {\n      const r = 2 * clipWidth * clipWidth;\n      const endX = -r * Math.cos(endAngle + PI / 2) + x;\n      const endY = -r * Math.sin(endAngle + PI / 2) + y;\n      const startX = r * Math.cos(startAngle + PI / 2) + x;\n      const startY = r * Math.sin(startAngle + PI / 2) + y;\n      ctx.lineTo(endX, endY);\n      ctx.lineTo(startX, startY);\n    }\n  }\n  ctx.closePath();\n  ctx.moveTo(0, 0);\n  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset,\n    borderRadius\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n    clipSelf(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n    selfJoin: false\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    chart,\n    index,\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis,\n      clip\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale,\n    clip\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  let fillColor = below;\n  if (below !== above) {\n    if (property === 'x') {\n      clipVertical(ctx, target, area.top);\n      fill(ctx, {\n        line,\n        target,\n        color: above,\n        scale,\n        property,\n        clip\n      });\n      ctx.restore();\n      ctx.save();\n      clipVertical(ctx, target, area.bottom);\n    } else if (property === 'y') {\n      clipHorizontal(ctx, target, area.left);\n      fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property,\n        clip\n      });\n      ctx.restore();\n      ctx.save();\n      clipHorizontal(ctx, target, area.right);\n      fillColor = above;\n    }\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: fillColor,\n    scale,\n    property,\n    clip\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(clipX, firstPoint.y);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(clipX, lastPoint.y);\n    }\n  }\n  ctx.lineTo(clipX, target.first().y);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale,\n    clip\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n    ctx.beginPath();\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  static positioners = positioners;\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, {\n  min,\n  max\n}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isNumberFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getAxisCount","_getAxis","getFirstScaleIdForIndexAxis","indexScaleId","firstScaleAxisId","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","axisCount","axisID","axisNumber","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","textAlign","useBorderRadius","borderRadius","map","style","text","fillStyle","backgroundColor","fontColor","lineDash","borderDash","lineDashOffset","borderDashOffset","lineJoin","borderJoinStyle","lineWidth","borderWidth","strokeStyle","borderColor","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","result","distanceToDefinedLo","slice","lo","findIndex","distanceToDefinedHi","hi","el","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","dash","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getDatasetClipArea","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipSelf","outerAngleClip","_normalizeAngle","innerAngleClip","clipWidth","closePath","rect","clipArc","pixelMargin","angleMargin","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","inner","selfJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","plugin_colors","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","fillColor","clipVertical","clipHorizontal","clipY","lineLoop","clipX","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\yashd\\paging-simulator\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getAxisCount() {\n    return this._getAxis().length;\n  }\n\n  getFirstScaleIdForIndexAxis() {\n    const scales = this.chart.scales;\n    const indexScaleId = this.chart.options.indexAxis;\n    return Object.keys(scales).filter(key => scales[key].axis === indexScaleId).shift();\n  }\n\n  _getAxis() {\n    const axis = {};\n    const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n    for (const dataset of this.chart.data.datasets) {\n      axis[valueOrDefault(\n        this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId\n      )] = true;\n    }\n    return Object.keys(axis);\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    const axisCount = this._getAxisCount();\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n      const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n      const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            const {labels: {pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n            if (data.labels.length && data.datasets.length) {\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  fontColor: color,\n                  hidden: !chart.getDataVisibility(i),\n                  lineDash: style.borderDash,\n                  lineDashOffset: style.borderDashOffset,\n                  lineJoin: style.borderJoinStyle,\n                  lineWidth: style.borderWidth,\n                  strokeStyle: style.borderColor,\n                  textAlign: textAlign,\n                  pointStyle: pointStyle,\n                  borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<TimeUnit | 'datetime', string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: string): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: string): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number | boolean): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options?: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<TimeUnit | 'datetime', string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase as {\n    new (options?: AnyObject): DateAdapter;\n    override<T extends AnyObject = AnyObject>(\n      members: Partial<Omit<DateAdapter<T>, 'options'>>\n    ): void;\n  }\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea, isNullOrUndef} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {vScale} = controller._cachedMeta;\n        const {_parsed} = metaset;\n\n        const distanceToDefinedLo = (_parsed\n          .slice(0, result.lo + 1)\n          .reverse()\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = (_parsed\n          .slice(result.hi)\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = undefined;\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    if (this._init === undefined) { // Do not trigger events before install\n      return;\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n      this._init = undefined; // Do not trigger events after uninstall\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea, _isDomSupported, retinaScale, getDatasetClipArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    // @ts-expect-error\n    const clip = getDatasetClipArea(this, meta);\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n\n    meta.controller.draw();\n\n    if (clip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _angleDiff, _normalizeAngle, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\nfunction clipSelf(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, x, y, outerRadius, innerRadius, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n\n  if (innerRadius > 0) {\n    const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n  } else {\n    const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n\n    if (borderJoinStyle === 'round') {\n      ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n    } else if (borderJoinStyle === 'bevel') {\n      const r = 2 * clipWidth * clipWidth;\n      const endX = -r * Math.cos(endAngle + PI / 2) + x;\n      const endY = -r * Math.sin(endAngle + PI / 2) + y;\n      const startX = r * Math.cos(startAngle + PI / 2) + x;\n      const startY = r * Math.sin(startAngle + PI / 2) + y;\n      ctx.lineTo(endX, endY);\n      ctx.lineTo(startX, startY);\n    }\n  }\n  ctx.closePath();\n\n  ctx.moveTo(0, 0);\n  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  ctx.clip('evenodd');\n}\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset, borderRadius} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n    clipSelf(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n    selfJoin: false,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of a segment -> need to add another point before this,\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of a segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea, getDatasetClipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {chart, index, line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis, clip});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale, clip} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  let fillColor = below;\n  if (below !== above) {\n    if (property === 'x') {\n      clipVertical(ctx, target, area.top);\n      fill(ctx, {line, target, color: above, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipVertical(ctx, target, area.bottom);\n    } else if (property === 'y') {\n      clipHorizontal(ctx, target, area.left);\n      fill(ctx, {line, target, color: below, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipHorizontal(ctx, target, area.right);\n      fillColor = above;\n    }\n  }\n  fill(ctx, {line, target, color: fillColor, scale, property, clip});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction clipHorizontal(ctx, target, clipX) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(clipX, firstPoint.y);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(clipX, lastPoint.y);\n    }\n  }\n\n  ctx.lineTo(clipX, target.first().y);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale, clip} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n\n    ctx.beginPath();\n\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}